{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NCARDS","NPIPS","COLORS","Card","React","memo","props","r","Math","min","width","height","circles","i","pips","push","react_default","a","createElement","key","cx","cy","floor","fill","onClick","class","version","viewBox","baseProfile","xmlns","stroke","selected","strokeWidth","x","y","rx","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","deck","length","j","random","tmp","shuffle","cardPips","drawCards","clickHandlers","_loop","selectCard","state","cards","className","href","pop","selectedCards","Set","add","proSetEh","replaceSelection","setState","selection","pipTotal","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","objectSpread","has","toConsumableArray","PureComponent","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2QAGMA,SAAS,GACTC,EAAQ,EACRC,EAAS,CACb,MACA,SACA,SACA,QACA,OACA,UAYF,IAAMC,EAAOC,IAAMC,KAAK,SAACC,GAIvB,IAHA,IAAMC,EAAIC,KAAKC,IAAIH,EAAMI,MAAQ,EAAGJ,EAAMK,OAAS,GAAK,EAEpDC,EAAU,GACLC,EAAI,EAAGA,EAAIZ,EAAOY,IACrBP,EAAMQ,KAAQ,GAAKD,GACrBD,EAAQG,KACNC,EAAAC,EAAAC,cAAA,UACEC,IAAKN,EACLO,GAAI,KAAOb,GAAKM,EAAI,EAAI,IAAMN,EAAI,GAClCc,GAAI,KAAOd,EAAI,KAAOA,EAAIC,KAAKc,MAAMT,EAAI,GACzCN,EAAGA,EACHgB,KAAMrB,EAAOW,GACbW,QAASlB,EAAMkB,WAMvB,OACER,EAAAC,EAAAC,cAAA,OAAKO,MAAM,QACTT,EAAAC,EAAAC,cAAA,OACEQ,QAAQ,MACRC,QAAQ,cACRC,YAAY,OACZC,MAAM,8BACNb,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QACEY,OAASxB,EAAMyB,SAAW,QAAU,QACpCC,YAAa1B,EAAMQ,KAAO,EAAI,MAAQ,MACtCS,KAAK,QACLU,EAAG,EACHC,EAAG,EACHxB,MAAOJ,EAAMI,MACbC,OAAQL,EAAMK,OACdwB,GAAI5B,EACJiB,QAASlB,EAAMkB,UAEhBZ,OAwIIwB,cA/Hb,SAAAA,IAAc,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,OAGA,IADA,IAAII,EAAO,GACF/B,EAAI,EAAGA,EAAK,GAAKZ,EAAQY,IAChC+B,EAAK7B,KAAKF,IA7DhB,SAAiBI,GACf,IAAK,IAAIJ,EAAII,EAAE4B,OAAQhC,EAAI,EAAGA,IAAK,CACjC,IAAMiC,EAAItC,KAAKc,MAAMd,KAAKuC,SAAWlC,GAC/BmC,EAAM/B,EAAEJ,EAAI,GAClBI,EAAEJ,EAAI,GAAKI,EAAE6B,GACb7B,EAAE6B,GAAKE,GA0DPC,CAAQL,GAGR,IADA,IAAIM,EAAW,GACNrC,EAAI,EAAGA,EAAIb,EAAQa,IAC1BqC,EAASrC,GAAK,EAEhBwB,EAAKc,UAAUD,EAAUN,GAEzBP,EAAKe,cAAgB,GACrB,IAhBY,IAAAC,EAAA,SAgBHxC,GACPwB,EAAKe,cAAcrC,KAAK,kBAAMsB,EAAKiB,WAAWzC,MADvCA,EAAI,EAAGA,EAAIb,EAAQa,IAAKwC,EAAxBxC,GAhBG,OAoBZwB,EAAKkB,MAAQ,CACXX,OACAM,WACAnB,SAAU,GAvBAM,wEA6BZ,IADA,IAAImB,EAAQ,GACH3C,EAAI,EAAGA,EAAIb,EAAQa,IAC1B2C,EAAMzC,KACJC,EAAAC,EAAAC,cAACf,EAAD,CACEgB,IAAKN,EACLoB,EAAG,GAAK,IAAMzB,KAAKc,MAAMT,EAAI,GAC7BqB,EAAG,IAAMrB,EAAI,EAAI,IAAM,GACvBH,MAAO,IACPC,OAAQ,IACRG,KAAM0B,KAAKe,MAAML,SAASrC,GAC1BkB,SAAUS,KAAKe,MAAMxB,SAAY,GAAKlB,EACtCW,QAASgB,KAAKY,cAAcvC,MAKlC,OACEG,EAAAC,EAAAC,cAAA,OAAKuC,UAAU,OACbzC,EAAAC,EAAAC,cAAA,OAAKuC,UAAU,eACbzC,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,KACEwC,KAAK,uDADP,UADF,oBAKuB1C,EAAAC,EAAAC,cAAA,KACnBwC,KAAK,iDADc,OALvB,eASkB1C,EAAAC,EAAAC,cAAA,KACdwC,KAAK,qDADS,uBATlB,0EAgBA1C,EAAAC,EAAAC,cAAA,6BACmBF,EAAAC,EAAAC,cAAA,cAASsB,KAAKe,MAAMX,KAAKC,QAD5C,MAIF7B,EAAAC,EAAAC,cAAA,OAAKO,MAAM,aACR+B,sCAMCN,EAAUN,GAClB,IAAK,IAAI/B,EAAI,EAAGA,EAAIb,EAAQa,IAC1B,GAAoB,IAAhBqC,EAASrC,GAAU,CACrB,GAAoB,IAAhB+B,EAAKC,OACP,OAEFK,EAASrC,GAAK+B,EAAKe,0CAKd9C,GAGT,IAFA,IAAMkB,EAAWS,KAAKe,MAAMxB,SAAY,GAAKlB,EACzC+C,EAAgB,IAAIC,IACfhD,EAAI,EAAGA,EAAIb,EAAQa,IACtBkB,EAAY,GAAKlB,GACnB+C,EAAcE,IAAItB,KAAKe,MAAML,SAASrC,IAGzB,IAAbkB,GAAkBS,KAAKuB,SAASH,GAClCpB,KAAKwB,iBAAiBJ,GAEtBpB,KAAKyB,SAAS,CACZlC,8CAKGmC,GACP,IAAIC,EAAW,EADGC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAElB,QAAAC,EAAAC,EAAcP,EAAdQ,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAyB,CACvBD,GADuBK,EAAAM,OAFP,MAAAC,GAAAV,GAAA,EAAAC,EAAAS,EAAA,YAAAX,GAAA,MAAAK,EAAAO,QAAAP,EAAAO,SAAA,WAAAX,EAAA,MAAAC,GAKlB,OAAoB,IAAbH,2CAGQP,GAEf,IADA,IAAIV,EAAQZ,OAAA2C,EAAA,EAAA3C,CAAA,GAAQE,KAAKe,MAAML,UACtBrC,EAAI,EAAGA,EAAIb,EAAQa,IACtB+C,EAAcsB,IAAIhC,EAASrC,MAC7BqC,EAASrC,GAAK,GAGlB,IAAI+B,EAAIN,OAAA6C,EAAA,EAAA7C,CAAOE,KAAKe,MAAMX,MAC1BJ,KAAKW,UAAUD,EAAUN,GACzBJ,KAAKyB,SAAS,CACZf,WACAN,OACAb,SAAU,WA5HE3B,IAAMgF,eCxDlBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7C,QACfuC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAO/F,EAAAC,EAAAC,cAAC8F,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,UAAwB7B,OAAOC,SAAS9B,MACpD2D,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,GAAA2B,OAAMH,UAAN,sBAEP/B,GAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,GACHK,KAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,KAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,KAAK,WAC7BV,OAAOC,SAASyC,aAKpBtC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFAyB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,KAAK,WACjCO,QAAQC,IACN,gHAMJd,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.927c38f5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst NCARDS = 7;\nconst NPIPS = 6;\nconst COLORS = [\n  \"red\",\n  \"orange\",\n  \"yellow\",\n  \"green\",\n  \"blue\",\n  \"purple\",\n];\n\nfunction shuffle(a) {\n  for (let i = a.length; i > 0; i--) {\n    const j = Math.floor(Math.random() * i);\n    const tmp = a[i - 1];\n    a[i - 1] = a[j];\n    a[j] = tmp;\n  }\n}\n\nconst Card = React.memo((props) => {\n  const r = Math.min(props.width / 2, props.height / 3) / 3;\n\n  let circles = [];\n  for (let i = 0; i < NPIPS; i++) {\n    if (props.pips & (1 << i)) {\n      circles.push(\n        <circle\n          key={i}\n          cx={1.75 * r + (i % 2 ? 2.5 * r : 0)}\n          cy={1.75 * r + 2.75 * r * Math.floor(i / 2)}\n          r={r}\n          fill={COLORS[i]}\n          onClick={props.onClick}\n        />\n      );\n    }\n  }\n\n  return (\n    <div class=\"Card\">\n      <svg\n        version=\"1.1\"\n        viewBox=\"0 0 220 320\"\n        baseProfile=\"full\"\n        xmlns=\"http://www.w3.org/2000/svg\">\n        <g>\n          <rect\n            stroke={(props.selected ? \"green\" : \"black\")}\n            strokeWidth={props.pips > 0 ? \"5px\" : \"0px\"}\n            fill=\"white\"\n            x={5}\n            y={5}\n            width={props.width}\n            height={props.height}\n            rx={r}\n            onClick={props.onClick}\n          />\n          {circles}\n        </g>\n      </svg>\n    </div>\n  );\n});\n\nclass App extends React.PureComponent {\n\n  constructor() {\n    super();\n\n    let deck = [];\n    for (let i = 1; i < (1 << NPIPS); i++) {\n      deck.push(i);\n    }\n    shuffle(deck);\n\n    let cardPips = {};\n    for (let i = 0; i < NCARDS; i++) {\n      cardPips[i] = 0;\n    }\n    this.drawCards(cardPips, deck);\n\n    this.clickHandlers = [];\n    for (let i = 0; i < NCARDS; i++) {\n      this.clickHandlers.push(() => this.selectCard(i));\n    }\n\n    this.state = {\n      deck,\n      cardPips,\n      selected: 0,\n    };\n  }\n\n  render() {\n    let cards = [];\n    for (let i = 0; i < NCARDS; i++) {\n      cards.push(\n        <Card\n          key={i}\n          x={10 + 210 * Math.floor(i / 2)}\n          y={10 + (i % 2 ? 310 : 0)}\n          width={200}\n          height={300}\n          pips={this.state.cardPips[i]}\n          selected={this.state.selected & (1 << i)}\n          onClick={this.clickHandlers[i]}\n        />\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"Description\">\n          <p>\n            <a\n              href=\"https://en.wikipedia.org/wiki/Projective_Set_(game)\"\n            >\n              ProSet\n            </a> is a variant of <a\n              href=\"https://en.wikipedia.org/wiki/Set_(card_game)\"\n            >\n              Set\n            </a> created at <a\n              href=\"https://en.wikipedia.org/wiki/Canada/USA_Mathcamp\"\n            >\n              Canada/USA MathCamp\n            </a>. Find a set of cards which have an even number of each colour\n            of dot!\n          </p>\n          <p>\n            Cards remaining: <strong>{this.state.deck.length}</strong>.\n          </p>\n        </div>\n        <div class=\"All-Cards\">\n          {cards}\n        </div>\n      </div>\n    );\n  }\n\n  drawCards(cardPips, deck) {\n    for (let i = 0; i < NCARDS; i++) {\n      if (cardPips[i] === 0) {\n        if (deck.length === 0) {\n          return;\n        }\n        cardPips[i] = deck.pop();\n      }\n    }\n  }\n\n  selectCard(i) {\n    const selected = this.state.selected ^ (1 << i);\n    let selectedCards = new Set();\n    for (let i = 0; i < NCARDS; i++) {\n      if (selected & (1 << i)) {\n        selectedCards.add(this.state.cardPips[i]);\n      }\n    }\n    if (selected !== 0 && this.proSetEh(selectedCards)) {\n      this.replaceSelection(selectedCards);\n    } else {\n      this.setState({\n        selected,\n      });\n    }\n  }\n\n  proSetEh(selection) {\n    let pipTotal = 0;\n    for (let s of selection) {\n      pipTotal ^= s;\n    }\n    return pipTotal === 0;\n  }\n\n  replaceSelection(selectedCards) {\n    let cardPips = { ...this.state.cardPips };\n    for (let i = 0; i < NCARDS; i++) {\n      if (selectedCards.has(cardPips[i])) {\n        cardPips[i] = 0;\n      }\n    }\n    let deck = [...this.state.deck];\n    this.drawCards(cardPips, deck);\n    this.setState({\n      cardPips,\n      deck,\n      selected: 0,\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}