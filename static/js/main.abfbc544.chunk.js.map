{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NCARDS","NPIPS","COLORS","Card","r","Math","min","this","props","width","height","circles","i","pips","push","react_default","a","createElement","key","cx","cy","floor","fill","className","onClick","version","viewBox","baseProfile","xmlns","stroke","getHighlight","strokeWidth","x","y","rx","selected","spoiler","React","PureComponent","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","deck","length","j","random","tmp","shuffle","cardPips","drawCards","clickHandlers","_loop","state","setState","selectCard","spoilHandler","spoil","cards","App_Card","href","pop","selectedCards","Set","add","proSetEh","replaceSelected","pipTotal","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","objectSpread","has","toConsumableArray","choices","minI","useIt","findProSet","loseIt","proSet","selection","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.abfbc544.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst NCARDS = 7;\nconst NPIPS = 6;\nconst COLORS = [\n  \"red\",\n  \"orange\",\n  \"#f7f020\",\n  \"green\",\n  \"blue\",\n  \"purple\",\n];\nconst HIGHLIGHT = \"#00aa00\";\nconst CARD_BG = \"#dddddd\";\n\nfunction shuffle(a) {\n  for (let i = a.length; i > 0; i--) {\n    const j = Math.floor(Math.random() * i);\n    const tmp = a[i - 1];\n    a[i - 1] = a[j];\n    a[j] = tmp;\n  }\n}\n\nclass Card extends React.PureComponent {\n\n  render() {\n    const r = Math.min(this.props.width / 2, this.props.height / 3) / 3;\n\n    let circles = [];\n    for (let i = 0; i < NPIPS; i++) {\n      if (this.props.pips & (1 << i)) {\n        circles.push(\n          <circle\n            key={i}\n            cx={1.80 * r + (i % 2 ? 2.5 * r : 0)}\n            cy={1.75 * r + 2.75 * r * Math.floor(i / 2)}\n            r={r}\n            fill={COLORS[i]}\n          />\n        );\n      }\n    }\n\n    return (\n      <div className=\"Card\" onClick={this.props.onClick}>\n        <svg\n          version=\"1.1\"\n          viewBox=\"0 0 220 320\"\n          baseProfile=\"full\"\n          xmlns=\"http://www.w3.org/2000/svg\">\n          <g>\n            <rect\n              stroke={this.getHighlight()}\n              strokeWidth={this.props.pips > 0 ? \"5px\" : \"0px\"}\n              fill={CARD_BG}\n              x={5}\n              y={5}\n              width={this.props.width}\n              height={this.props.height}\n              rx={r}\n            />\n            {circles}\n          </g>\n        </svg>\n      </div>\n    );\n  }\n\n  getHighlight() {\n    if (!this.props.selected) {\n      return \"black\";\n    }\n\n    if (this.props.spoiler) {\n      return \"red\";\n    }\n    \n    return HIGHLIGHT;\n  }\n}\n\nclass App extends React.PureComponent {\n\n  constructor() {\n    super();\n\n    let deck = [];\n    for (let i = 1; i < (1 << NPIPS); i++) {\n      deck.push(i);\n    }\n    shuffle(deck);\n\n    let cardPips = {};\n    for (let i = 0; i < NCARDS; i++) {\n      cardPips[i] = 0;\n    }\n    this.drawCards(cardPips, deck);\n\n    this.clickHandlers = [];\n    for (let i = 0; i < NCARDS; i++) {\n      this.clickHandlers.push(() => {\n        if (this.state.spoiler) {\n          this.setState({selected: 0, spoiler: false});\n        } else {\n          this.selectCard(i);\n        }\n      });\n    }\n\n    this.spoilHandler = () => this.spoil();\n\n    this.state = {\n      deck,\n      cardPips,\n      selected: 0,\n      spoiler: false,\n    };\n  }\n\n  render() {\n    let cards = [];\n    for (let i = 0; i < NCARDS; i++) {\n      cards.push(\n        <Card\n          key={i}\n          x={10 + 210 * Math.floor(i / 2)}\n          y={10 + (i % 2 ? 310 : 0)}\n          width={200}\n          height={300}\n          pips={this.state.cardPips[i]}\n          selected={(this.state.selected & (1 << i)) !== 0}\n          spoiler={this.state.spoiler}\n          onClick={this.clickHandlers[i]}\n        />\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"Description\">\n          <p>\n            <a\n              className=\"App-link\"\n              href=\"https://en.wikipedia.org/wiki/Projective_Set_(game)\"\n            >\n              ProSet\n            </a> is a variant of <a\n              className=\"App-link\"\n              href=\"https://en.wikipedia.org/wiki/Set_(card_game)\"\n            >\n              Set\n            </a> created at <a\n              className=\"App-link\"\n              href=\"https://en.wikipedia.org/wiki/Canada/USA_Mathcamp\"\n            >\n              Canada/USA MathCamp\n            </a>. Find a set of cards which have an even number of each colour\n            of dot!\n          </p>\n          <p>\n            Cards remaining: <strong>{this.state.deck.length}</strong>. <button\n              className=\"App-link\"\n              onClick={this.spoilHandler}\n            >\n              I give up. Show me a sample ProSet!\n            </button>\n          </p>\n        </div>\n        <div className=\"All-Cards\">\n          {cards}\n        </div>\n      </div>\n    );\n  }\n\n  drawCards(cardPips, deck) {\n    for (let i = 0; i < NCARDS; i++) {\n      if (cardPips[i] === 0) {\n        if (deck.length === 0) {\n          return;\n        }\n        cardPips[i] = deck.pop();\n      }\n    }\n  }\n\n  selectCard(i) {\n    const selected = this.state.selected ^ (1 << i);\n    let selectedCards = new Set();\n    for (let i = 0; i < NCARDS; i++) {\n      if (selected & (1 << i)) {\n        selectedCards.add(this.state.cardPips[i]);\n      }\n    }\n    if (selected !== 0 && !this.spoiler && this.proSetEh(selectedCards)) {\n      this.replaceSelected(selectedCards);\n    } else {\n      this.setState({\n        selected,\n      });\n    }\n  }\n\n  proSetEh(selected) {\n    let pipTotal = 0;\n    for (let s of selected) {\n      pipTotal ^= s;\n    }\n    return pipTotal === 0;\n  }\n\n  replaceSelected(selectedCards) {\n    let cardPips = { ...this.state.cardPips };\n    for (let i = 0; i < NCARDS; i++) {\n      if (selectedCards.has(cardPips[i])) {\n        cardPips[i] = 0;\n      }\n    }\n    let deck = [...this.state.deck];\n    this.drawCards(cardPips, deck);\n    this.setState({\n      cardPips,\n      deck,\n      selected: 0,\n    });\n  }\n\n  findProSet(choices, minI, pipTotal) {\n    if (choices > 0 && pipTotal === 0) {\n      return choices;\n    }\n\n    for (let i = minI; i < NCARDS; i++) {\n      const useIt = this.findProSet(\n        choices ^ (1 << i),\n        i + 1,\n        pipTotal ^ this.state.cardPips[i],\n      );\n      if (useIt !== 0) {\n        return useIt;\n      }\n      const loseIt = this.findProSet(\n        choices,\n        i + 1,\n        pipTotal ^ this.state.cardPips[i],\n      );\n      if (loseIt !== 0) {\n        return loseIt;\n      }\n    }\n\n    return 0;\n  }\n\n  spoil() {\n    const proSet = this.findProSet(0, 0, 0);\n    let selection = [];\n    for (let i = 0; i < NCARDS; i++) {\n      if (proSet & (1 << i)) {\n        selection.push(this.state.cardPips[i]);\n      }\n    }\n    let selected = 0;\n    for (let i = 0; i < NCARDS; i++) {\n      if (proSet & (1 << i)) {\n        selected ^= (1 << i);\n      }\n    }\n    this.setState({\n      selected,\n      spoiler: true,\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}